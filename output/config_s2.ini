[data_paths]
# Hipparcos ID of the star, used for fetching absolute astrometry.
# If the Hipparcos ID is invalid the fit will not use HGCA astrometry. 
# In that case you must supply a parallax and parallax_error in [priors].
HipID = -1 
# The file containing the Hipparcos Gaia Catalog of Accelerations.
HGCAFile = HGCA_vEDR3.fits
# The file containing the relative astrometry for the star.
AstrometryFile = output/data/S2_relAST.txt
# The path to the Gaia/GOST epochs and scan angles as a csv file.
# The file path to the initial parameter guesses (starting conditions for the walkders) to the orbit. Set to None for default guess.
start_file = output/start_s2.dat

[mcmc_settings]
# Number of temperatures to use in the parallel tempering chain.
ntemps = 10
# Number of walkers. Each walker will have ntemps number of chains.
nwalkers = 100
# Number of planets to fit.
nplanets = 1
# Number of steps contained in each chain.
nstep = 5000 
# How much to thin the chain (save every thin-th step).
thin = 50
# Number of threads to use with emcee. Note this built-in parallelization is poor.
nthreads = 1
# True if you want to use the epoch astrometry in GaiaDataDir, Hip1DataDir,
# Hip2DataDir. Hip1 and Hip2 data is combined in a 60/40 mix as described in
# the HGCA paper (Brandt 2018 and 2021). False if not. 
use_epoch_astrometry = False
# Use a separate jitter for each RV instrument?
jit_per_inst = False

[priors_settings]
# priors on primary mass (solar), if prior is not specified, mpri should be inf
mpri = 415.4
mpri_sig = 1.4
parallax=0.12227928588897041
parallax_error=0.00019437890884771525

[plotting]
# Path to mcmc chains. This is what's produced by the orbit_fit command.
McmcDataFile = output/chains/S2_chain000.fits
# Diagnostic plots to check for convergence.
check_convergence = True
# Define burnin for chains.
burnin = 50
# Which companion to plot?
iplanet = 0

# Name of the target
target = S2
# This is a customized range of epochs you want to plot.
start_epoch = 1990.
end_epoch = 2015.
# Number of random orbits drawn from the posterior distribution you want to plot.
num_orbits = 50
# Define step size for plotting.
num_steps = 1500
# Plot random predicted epoch positions on the Astrometry plot.
predicted_years = 1990,2000,2010,2020,2030
# Prediction of the location of the companion in a future epoch.
position_predict = 2010

# Select which plot you want to generate
Astrometry_orbits_plot = True
Astrometric_prediction_plot = False
RV_orbits_plot = False
RV_plot = False
RV_Instrument = All
Relative_separation_plot = False
Position_angle_plot = False
Proper_motion_plot = False
Proper_motion_separate_plots = False
Corner_plot = False

############# Advanced plotting settings #############
# 1. Set axes limits. Set the upper and lower limit for x and y axes.
set_limit = True 
xlim = 0.005, -0.015
ylim = -0.0075,0.01
# Choose the color of the marker for plotting the observed data points.
marker_color = blue

# 2. Turn on/off colorbar. Choose a matplotlib colormap, and choose to color
# code by the secondary mass (msec_solar or msec_jup) or eccentricity (ecc).
use_colorbar = True
colormap = viridis
reference = msec_solar

# 3. Turn on/off the title of the plot? Additionally, if user wants to add
# text somewhere on the plot, enter the text and its x and y position (with
# (0, 0) being the bottom left and (1, 1) being the top right).
show_title = False
add_text = True
text_name = S2
x_text = 0.5
y_text = 0.9


[save_results]
# quantiles: median and 1sigma = 0.16, 0.5, 0.84, 
# median and 2sigma = 0.025, 0.5, 0.975, or arbitrary
save_params = True
err_margin = 0.16, 0.5, 0.84
